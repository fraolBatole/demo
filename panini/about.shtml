<!--#include virtual="includes/top.html"-->
<title>About the Panini programming language</title>
<!--#include virtual="includes/header.html"-->
<h1>About the Panini project</h1>

<!-- TABLE OF CONTENTS -->
<div class="col2-toc">
 <ul>
  <li><a href="about.shtml#capsule">Capsule-oriented programming</a></li>  
  <li><a href="about.shtml#audience">Audience</a></li>
  <li><a href="about.shtml#what">The Panini language</a></li>
  <li><a href="about.shtml#goals">Design goals</a></li>
  <li><a href="about.shtml#name">Origin of name</a></li>
  <li><a href="man/indexch3.html">Getting started</a></li>
  <li><a href="man/indexch2.html">Motivation</a></li>
  <li><a href="papers.shtml">Publications</a></li>
 </ul>
</div>

<!-- CONTENT -->
<div class="col2-content">

<h2><a name="capsule">Capsule-oriented programming</a></h2>

<p>
<a href="/papers/TR-13-01">
Capsule-oriented programming </a>
is a new programming style designed to address 
the challenges of concurrent programming.
Main goal is to enable non-concurrency experts to write 
correct and efficient concurrent programs. 
If you are unfamiliar, 
<a href="docs/motivation.shtml">the Panini programming guide</a> 
explains the challenges of writing 
correct and efficient concurrent programs.
</p>
<p>
A central goal of this programming style is to provide tools to
enable programmers to simply do what they do best, that is, to
describe a system  in terms of its modular structure 
and write sequential code to implement the operations of those modules.
To achieve this, capsule-oriented programming introduces a new 
abstraction called <EM>capsule</EM>.
A capsule is similar to a process; it defines a set of public 
operations, and also serves as a memory region for some set of ordinary objects.
</p>
<p>
One goal in capsule-oriented programming is that the programmer
should get the benefits of asynchronous execution without
being forced to adapt to an asynchronous, message-passing
style of programming.
To the programmer, inter-capsule calls look like ordinary method calls.
Capsule-oriented programs are implicitly concurrent. 
There are no explicit threads or synchronization locks; 
if necessary or beneficial, concurrency is introduced by
the compiler.
Capsule-oriented programming eliminates two classes of concurrency
errors: sequential inconsistency and race conditions due to shared data.
</p>

<h2><a name="audience">Audience</a></h2>

<p><b>Who can benefit?</b>
Capsule-oriented programming is a suitable approach for programmers who don't want to be 
distracted by concurrency concerns so that they can focus on their software's logic.
If you want your programming language to take care of your concurrency 
concerns just like Java and C# handles your memory management
concerns then capsules-oriented programming is for you.</p>

<p><b>Who may NOT benefit?</b>
Capsule-oriented programming may not be a suitable approach for a software project 
if it is preferred in that project to manage every aspect of concurrency manually. 
This is similar to why Java and C# are not suitable, if a software project requires 
manual memory management and explicit pointer arithmetic. <p>
</p>

<h2><a name="what">The Panini language</a></h2>

<p>
Panini is a capsule-oriented programming language whose goals 
are to ease development of correct, scalable, and portable concurrent software.
See <a href="about.shtml#name">below</a> for origin of the name.
PaniniJ, in particular, is a capsule-oriented extension of the Java programming 
language that runs on the standard JVM platform.
<!-- for multicore, manycore, 
heterogeneous & performance-asymmetric core, and cloud platforms.-->
Panini provides new, implicitly concurrent, modularization mechanisms.
If programmers use these mechanisms to structure
their software system to improve modularity in its design, they get
implicit concurrency at the boundaries of these mechanisms. 
Modularization leads to improved concurrency. 
The language thus encompasses fundamental and practical efforts to 
unify modularization and parallelization mechanisms.
</p>

<h2><a name="goals">Design goals</a></h2>
<p>Panini has the following main design goals:</p>
<ul>
	<li>Improve modularity, while exposing implicit concurrency in
	software design leading to improved utilization of emerging multicore
	and manycore platforms.</li>
	<li>Support sequential consistency and data race freedom in the
	presence of implicit concurrency.</li>
	<li>Enable separate type-checking, compilation, and modular
	reasoning of both sequential and concurrent code.</li>
</ul>
<p>All these goals are important for building correct, scalable, and
portable software systems in the multicore/manycore/cloud era but harder
to achieve in current programming languages.</p>

<h2><a name="history">Origin of name</a></h2>
<p>The language takes its name from <a
	href="http://en.wikipedia.org/wiki/P%C4%81%E1%B9%87ini">Panini</a>
(fl.c.400 BC), an Indian grammarian, known for his formulation of the
Sanskrit grammar rules (the earliest work on linguistics). If you are
completely new to the idea and the Panini project, you may want to 
read our <a href="docs/position.shtml">overview</a>.</p>

<!-- PAGE UPDATE -->
<p id="update">Page last modified on $Date: 2013/08/15 06:24:35 $</p>
</div>

<!--#include virtual="includes/bottom.html"-->
