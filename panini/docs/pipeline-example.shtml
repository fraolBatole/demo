<!--#include virtual="../includes/top.html"-->
<title>The Panini Programming Guide</title>
<!-- PAGE SPECIFIC STYLING -->
<style type="text/css">
  .col2-toc h2 {
    margin: 0 0 10px;
  }
</style>
<!--#include virtual="../includes/header.html"-->
<h1>Example</h1>

<script type="text/javascript">
  copyright = new Date()
  fullYear = copyright.getFullYear();
  document.write("<h5>Copyright &copy; 2006-" + fullYear + ", Iowa State University of Science and Technology. All rights reserved.</h5>")
</script>

<!-- TABLE OF CONTENTS -->
<!--#include virtual="./toc-examples.html"-->

<!-- CONTENT -->
<div class="col2-content">
  <h2><a name="histogram">IMPLEMENTING THE PIPELINE PATTERN IN PANINI</a></h2>
  <p>
    Panini's features can also be useful for implementing applications
    that can benefit from pipeline parallelism.

    To illustrate, consider the problem of maintaining the running
    average, total, minimum and maximum price of a stock in a day.
    To that end we need a generic entity, a pipeline stage, that has
    different concrete implementations. And we want to be able to
    flexibly compose these pipeline stages.

  </p>
  <h2><a name="architecture">ARCHITECTURE and DESIGN</a></h2>
  <p>
    In capsule-oriented programming better design leads to better implicit concurrency,
    i.e. better designed programs often run faster,
    so it is valuable to start off with the architecture and design.
  </p>
  <ol>
    <li>
      <p>
        <EM>Divide the problems into subproblems.</EM>
        In our case, the subproblems are:
        <ul>
          <li>
            computing average, sum, min, max
          </li>
          <li>
            generate multiple values and feed them through the pipeline
          </li>
        </ul>

        The Panini programmer specifies a system as a collection
        of <EM>capsules</EM>, <EM>signatures</EM> and ordinary object-oriented classes.
        A <EM>capsule</EM> is an abstraction for decomposing a software
        into its parts and a <EM>design block</EM> is a mechanism for composing these
        parts together. So the first order of business is to come up with
        this <EM>capsule-oriented design</EM>. This involves creating capsules
        and assigning subtasks to these capsules.
      </p>
    </li>
    <li>
      <p>
        <EM>Make key design decisions.</EM>
        In our case, we want to be able to easily create a program
        that can compute either of the above values in any order.

        To that end, Panini allows us to declare a <em>signature</em>
        which allows us to define an common interface for capsules.
      </p>
    </li>
    <li>
      <p>
        <EM>Create signatures, capsules and assign responsibilities to capsules.</EM>
        We will start by defining a signature <em>Stage</em>. It declares two
        procedure that will have to be implemented by any capsules that wants to
        implement it, the semantics are similar to that of Java interfaces.
        <pre class="brush: panini;">
	signature Stage {
		// handles pipeline stage input
		void consume(long n);
		
		// reports the current state of the pipeline stage
    	void report();
	}
	</pre>
      <p>
        Now that we have a signature we can create the capsules that
        represent the pipeline stages. Each of the stages that
        are interchangeable expect a <em>Stage</em> parameter
        so that they can be composed freely.
        <pre class="brush: panini;">
    capsule Average(Stage next) implements Stage {...}
    capsule Sum(Stage next) implements Stage {...}
    capsule Min(Stage next) implements Stage {...}
    capsule Max(Stage next) implements Stage {...}
     
    //we create an additional stage that is used to seal off the pipeline
    capsule Sink() implements Stage {...}
	</pre>
      </p>
      <p>
        And the only capsule left to define is the one that feeds
        numbers into the pipeline.
        <pre class="brush: panini;">
capsule Pipeline(){...}
</pre>
      </p>
    </li>

    <li>
      <p>
        <EM>Integrate capsules to form a design block.</EM>
        We know that we need one Pipeline capsule and at least
        one sink, all other capsules could be composed as often
        and in any way we would want to. For no reason other than
        simply demonstrating everything we will use one capsule
        of each.
      </p>
      <pre class="brush: panini;">
capsule Pipeline() {
  design {
    Average avg; Sum sum; Min min; Max max; Sink sink;
    avg(sum); sum(min); min(max); max(snk); sink(num);
  }

  void run() {...}
}
  </pre>
      <p>
        Every capsule can have a design block, it effectively marks
        the capsule as a high level component that is composed out
        of other capsules. In our case, the best choice would be to
        give the Pipeline capsule such a block.
      </p>

      <p>
        This declarative design block (lines 2-5) declares one of each
        <em>Stage</em> capsule types (line 3). On line 4 we link
        each pipeline stage in the order: Average -> Sum -> Min -> Max -> Sink.
      </p>
    </li>

  </ol>
  <h2><a name="implementation">IMPLEMENTATION</a></h2>
  <ol>
    <li>
      <p>
        <EM>Capsules that implement Stage.</EM>
        The behaviour of these capsules is fairly straightforward. Every time the
        <em>consume</em> is called they accumulate state and then call the <em>consume</em>
        procedure on the next capsule (line 4) in the pipeline. They behave in a similar manner for
        the <em>report</em> procedure as well.         <pre class="brush: panini;">
capsule Sum (Stage next) implements Stage {
    long sum = 0; 
    void consume(long n) {
        next.consume(n);
        sum += n;
    }

    void report(){
        next.report();
        System.out.println("Sum of numbers was " + sum + ".");
    }
}

capsule Min (Stage next) implements Stage {
    long min = Long.MAX_VALUE; 
    void consume(long n) {
        next.consume(n);
        if(n < min) min = n;
    }

    void report(){
        next.report();
        System.out.println("Min of numbers was " + min + ".");
    }
}

capsule Max (Stage next) implements Stage {
    long max = 0; 
    void consume(long n) {
        next.consume(n);
        if ( n > max) max = n;
    }

    void report() {
        next.report();
        System.out.println("Max of numbers was " + max + ".");
    }
}

capsule Sink(long num) implements Stage {
    long count = 0;
    void consume(long n) {
        count++;
    }

    void report() {
        if (count != num)
            throw new RuntimeException("count should be: " + num + "; but was: " + count);
        System.out.println("Successful " + count + " runs!!");
    }
}
</pre>
      <p>
        The implementation of the <em>compute</em> procedures should be easily understood
        by any Java programmer, it has the same syntax. As for the semantics, a call to a
        non-void external capsule procedure immediately returns a "future" value, while
        the procedure that is called runs concurrently. That value behaves exactly like normal
        values, so you won't need to modify your programs to make adjustments
        for it. When you need the actual value, and if the called procedure has
        completed running execution proceeds as usual, otherwise execution is
        blocked until the called procedure completes running.
      </p>
      </p>
    </li>
    <li>
      <p>
        <EM>Capsule Pipeline.</EM>

        Line 10 declares a procedure <em>run</em>, every capsule can optionally
        declare such a method and it is implicitely invoked at the start of
        the program.
      </p>
      <pre class="brush: panini;">
capsule Pipeline () {
    int num = 500;

    design {
        Average avg; Sum sum; Min min; Max max; Sink snk;
        avg(sum); sum(min); min(max); max(snk); snk(num);
    }

    Random prng = new Random ();
    void run() {
        for (int j = 0; j < num; j++) {
            long n = prng.nextInt(1024);
            avg.consume(n);
        }
        avg.report();
    }
}
	</pre>
      <p>
        The execution of this program begins by allocating memory for all
        capsule instances, and connecting them together as specified in the
        design declaration (lines 4-7) Recall that capsule parameters define
        the other capsule instances required for a capsule to function. A
        capsule listed in another capsule's parameter list or in its design block
        can be sent messages from that capsule. Design declarations allow a programmer
        to define the connections between individual capsule instances. These connections
        are established before execution of any capsule instance begins.
    </p>
    <p>
        Next, any capsule with a <em>run</em> procedure begins executing
        independently as soon as the initialization and interconnection of all
        capsules is complete and may generate calls to the procedures of other
        capsules. For example, capsule <em>Pipeline</em> will run the code on
        lines 10-16. Capsules without a <em>run</em> procedure, such as <em>Max</em>,
        perform computation only when their procedures are invoked.
    </p>  

    </li>
  </ol>
  <h2><a name="implicit-concurrency">IMPLICIT CONCURRENCY</a></h2>
  <p>
    This code is very similar to how one would write a sequential program
    to model the same scenario, so the structure of this Panini program
    would be familiar to a sequential programmer. This code is also free
    of any concurrency-related concerns, such as setup and teardown
    threads for running each stage in the pipeline concurrently and
    synchronization between adjacent stages to hand off the input to the
    next stage, which is typical of a pipeline pattern. This code would,
    however, have all of the benefits of the explicitly concurrent
    implementation. Therefore, we believe that a sequential programmer
    would have a greater chance of success when writting such a program
    in Panini.
  </p>
  <p>
    The implicit concurrency in this example is on line 13 in the capsule Pipeline,
    where calling an external capsule procedure immediately returns. Additionally,
    every call to a <em>consume</em> procedure on any <em>Stage</em> type capsules,
    at any point throughout the pipeline are subject to implicit concurrency.
  </p>
  <p>
    When it is safe to exploit these sources of implicit concurrency, Panini
    compiler will automatically introduce parallelism to speedup this program
    without intervention from the programmer.
  </p>
  <!--
  <HR SIZE=1, WIDTH=95%, ALIGN=CENTER, NOSHADE>
  <b>References</b>
  <ol>
  <li>A large part of this text is taken from our latest <a
  href="http://www.cs.iastate.edu/~design/papers/TR-09-28">technical
  report</a>.
  <li>S. Russell and P. Norvig. Artificial Intelligence: A Modern
  Approach. Prentice Hall, 2nd edition, 2003.
  </ol> -->

  <!-- PAGE UPDATE -->
  <p id="update">
    Page last modified on $Date: 2013/08/02 18:29:37 $
  </p>

  <!-- GUIDE NAVIGATION -->
  <div class="page-nav">
    <!-- <a href="#">&lt; PREVIOUS</a> -->
    <a
    href="docs/starting-example.shtml#pgtop">&#94; RETURN TO TOP</a><!-- <a href="#">NEXT &gt;</a> -->
  </div>
</div>
<!--#include virtual="../includes/bottom.html"-->

