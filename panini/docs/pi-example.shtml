<!--#include virtual="../includes/top.html"-->
<title>The Panini Programming Guide</title>
<!-- PAGE SPECIFIC STYLING -->
<style type="text/css">
  .col2-toc h2 {
    margin: 0 0 10px;
  }
</style>
<!--#include virtual="../includes/header.html"-->
<h1>Example</h1>

<script type="text/javascript">
  copyright = new Date()
  fullYear = copyright.getFullYear();
  document.write("<h5>Copyright &copy; 2006-" + fullYear + ", Iowa State University of Science and Technology. All rights reserved.</h5>")
</script>

<!-- TABLE OF CONTENTS -->
<!--#include virtual="./toc-examples.html"-->

<!-- CONTENT -->
<div class="col2-content">
  <h2><a name="histogram">PI PROBLEM</a></h2>
  <p>
    To illustrate Panini's new features in practice, consider
    the classic problem of computing the constant pi using
    a Monte Carlo approximation.

    The idea behind the method is that we use the ratio, R, between the
    area of an enclosing square and the area on an enclosed circle,
    R ~= pi/4. We then proceed to randomly generating
    points within the above mentioned area of the square and count how
    many of them land in the enclosed circle. The ratio of points that
    land strictly withing the circle to the total number of points is
    a good approximation of the ratio R. We then multiply the result
    by 4 to get an estimate on the value of pi.

  </p>
  <h2><a name="architecture">ARCHITECTURE and DESIGN</a></h2>
  <p>
    In capsule-oriented programming better design leads to better implicit concurrency,
    i.e. better designed programs often run faster,
    so it is valuable to start off with the architecture and design.
  </p>
  <ol>
    <li>
      <p>
        <EM>Divide the problems into subproblems.</EM>
        In our case, the subproblems are:
        <ul>
          <li>
            randomly generate a point and test if it's in the boundary of the circle
          </li>
          <li>
            agreggate the results
          </li>
        </ul>

        The Panini programmer specifies a system as a collection
        of <EM>capsules</EM> and ordinary object-oriented classes.
        A <EM>capsule</EM> is an abstraction for decomposing a software
        into its parts and a <EM>design block</EM> is a mechanism for composing these
        parts together. So the first order of business is to come up with
        this <EM>capsule-oriented design</EM>. This involves creating capsules
        and assigning subtasks to these capsules.
      </p>
    </li>
    <li>
      <p>
        <EM>Create capsules and assign responsibilities to capsules.</EM>

        In assigning responsibility follow the information-hiding
        principle. We should have a capsule that randomly generates
        points and tests whether or not they are within the circle.
        A master capsule that gathers the results from all generative
        capsules.
      </p>

      <p>
        This suggests capsules: Pi, Worker. For convenience we will be creating
        a wrapper class Number that conveniently handles conversions from integers
        to doubles.
      </p>
      <pre class="brush: panini;">
     capsule Pi(String args[]) { }
     capsule Worker() { }
	   </pre>
	   <p>
	     Capsule Pi will be the one that receives the command line parameters.
	   </p>

    </li>
    <li>
      <p>
        <EM>Integrate capsules to form a design block.</EM>
        We now know that this program would require one Pi capsule,
        and multiple workers. At this time, we can make a decision about how
        many workers we want in this program. In this particular case we settle
        on a fixed number of Worker capsules, 10.
      </p>
      <p>
        Every capsule can have a design block, it effectively marks
        the capsule as a high level component that is composed out
        of other capsules. In our case the best choice would be to
        give the Pi capsule such a block.
        From the description of the problem we can see that the Pi
        capsule needs to know about the Worker capsules,
        but not the other way arround.
      </p>
      <p>
        Let us look at the public interfaces of each capsule and the design block:
      </p>
      <pre class="brush: panini;">
capsule Worker (double batchSize) {
	 // Computes the number of points, from a total of batchSize,
	 // that fall within the area of the circle
	Number compute(double batchSize) { ... }
}

capsule Pi (String[] args) {
	design {
        Worker workers[10];
    }
	void run(){ ... }
}
	</pre>
      <p>
        This declarative design block(lines 10-12) states that the program should
        have a set of 10 Worker capsules.
      </p>
    </li>

  </ol>
  <h2><a name="implementation">IMPLEMENTATION</a></h2>
  <ol>
    <li>
      <p>
        <EM>Capsule Worker.</EM>

        The behavior of capsule Worker is fairly straightforward:
        generate a given number of points and count whether or not they fall
        within the circle.
      <p>
        To allow other capsules to change its state, a capsule can provide
        capsule procedures, procedures for short. A capsule procedure is
        syntactically similar to methods in object-oriented languages,
        however, they are different semantically in two ways: first, a
        capsule procedures is by default public (although private helper
        procedures can be declared using the private keyword), and second
        a procedure invocation is guaranteed to be logically synchronous.
        In some cases, Panini may be able to run procedures in parallel
        to improve parallelism in Panini programs. In this particular
        case the only state of our capsule is the random number generator.
      </p>
      <pre class="brush: panini;">
capsule Worker () {
  Random prng = new Random ();
  Number compute(double num) {
    Number _circleCount = new Number(0);
    for (double j = 0; j < num; j++) {
      double x = prng.nextDouble();
      double y = prng.nextDouble();
      if ((x * x + y * y) < 1) _circleCount.incr();
    }
    return _circleCount;
  }
}
	</pre>      
      <p>
        The implementation of the compute procedure should be easily understood
        by any Java programmer, it has the same syntax. As for the semantics, a call to a
        non-void external capsule procedure immediately returns a "future" value, while
        the procedure that is called runs concurrently. That value behaves exactly like normal
        values, so you won't need to modify your programs to make adjustments
        for it. When you need the actual value, and if the called procedure has
        completed running execution proceeds as usual, otherwise execution is
        blocked until the called procedure completes running.
      </p>

      </p>
    </li>
    <li>
      <p>
        <EM>Capsule Pi.</EM>

        Line 5 declares a procedure <em>run</em>, every capsule can optionally
        declare such a method and it is implicitely invoked at the start of
        the program.
      </p>
      <pre class="brush: panini;">
capsule Pi (String[] args) {
  design {
    Worker workers[10];
  }
  void run(){
    if(args.length <= 0) {
      System.out.println("Usage: panini Pi [sample size], try several hundred thousand samples.");
      return;
    }
      
    double totalSamples = Integer.parseInt(args[0]);
    double startTime = System.currentTimeMillis();
    Number[] results = foreach(Worker w: workers) 
        w.compute(totalSamples/workers.length);

    double total = 0;
    for (int i=0; i < workers.length; i++)
      total += results[i].value(); 

    double pi = 4.0 * total / totalSamples; 
    System.out.println("Pi : " + pi);
    double endTime = System.currentTimeMillis();
    System.out.println("Time to compute Pi using " + totalSamples + " samples was:" + (endTime - startTime) + "ms.");
  }
}
	</pre>      

    </li>
  </ol>
  <h2><a name="implicit-concurrency">IMPLICIT CONCURRENCY</a></h2>
  <p>
    The implicit concurrency in this example is on line 12 in the capsule Pi,
    where calling an external capsule procedure immediately returns, the foreach
    is simply a sugar for calling the procedure on a capsule and storing the result
    in a cell of an array, one capsule at a time.
  </p>
  <p>
    On lines 15-16, each indexing of the results array might wind up
    blocking due to the fact that the result has not been computed up
    until that point.
  </p>
  <p>
    When it is safe to exploit these sources of implicit concurrency, Panini
    compiler will automatically introduce parallelism to speedup this program
    without intervention from the programmer.
  </p>
  <!--
  <HR SIZE=1, WIDTH=95%, ALIGN=CENTER, NOSHADE>
  <b>References</b>
  <ol>
  <li>A large part of this text is taken from our latest <a
  href="http://www.cs.iastate.edu/~design/papers/TR-09-28">technical
  report</a>.
  <li>S. Russell and P. Norvig. Artificial Intelligence: A Modern
  Approach. Prentice Hall, 2nd edition, 2003.
  </ol> -->

  <!-- PAGE UPDATE -->
  <p id="update">
    Page last modified on $Date: 2013/08/02 20:43:43 $
  </p>

  <!-- GUIDE NAVIGATION -->
  <div class="page-nav">
    <!-- <a href="#">&lt; PREVIOUS</a> -->
    <a
    href="docs/starting-example.shtml#pgtop">&#94; RETURN TO TOP</a><!-- <a href="#">NEXT &gt;</a> -->
  </div>
</div>
<!--#include virtual="../includes/bottom.html"-->

