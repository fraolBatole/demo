<!--#include virtual="../includes/top.html"-->
<title>Panini Programming Guide : Installing & Running the
Paninij Compiler</title>
<!-- PAGE SPECIFIC STYLING -->
<style type="text/css">
.col2-toc h2 {
	margin: 0 0 10px;
}
</style>
<!--#include virtual="../includes/header.html"-->

<h1>The Panini Programming Guide</h1>
<script type="text/javascript">
copyright=new Date()
fullYear=copyright.getFullYear();
document.write("<h5>Copyright &copy; 2006-" + fullYear + ", Iowa State University of Science and Technology. All rights reserved.</h5>")
</script>

<!-- TABLE OF CONTENTS -->
<div class="col2-toc">
<h2>Table of Contents</h2>
<ol>
	<li><a href="docs/index.shtml">Programming Guide Overview</a></li>
	<li><a href="docs/motivation.shtml">Motivation</a></li>
	<li><a href="docs/starting.shtml">Getting Started with Panini</a></li>
	<li><a href="docs/capsule-oriented.shtml">Capsule-oriented Design</a></li>
	<li><a href="docs/language.shtml">Panini Language</a></li>
	<li><a href="docs/parallel.shtml">Implicit Parallelism</a></li>
	<li>Installing and Running the Panini compiler
	<ul class="toc-currentpg">
		<li><a href="docs/running.shtml#download">Downloading the
		Compiler</a></li>
		<li><a href="docs/running.shtml#structure">Structure of
		Panini Distribution</a></li>
		<li><a href="docs/running.shtml#requirements">Requirements
		for Running Panini Compiler</a></li>
		<li><a href="docs/running.shtml#running">Running the Panini
		Compiler</a></li>
		<li><a href="docs/running.shtml#commandline">Running the
		Panini Compiler from Command-Line</a></li>
		<li><a href="docs/running.shtml#unix">Unix-specific
		Instructions for Command-line</a></li>
		<li><a href="docs/running.shtml#examples">Compiling Examples
		from Command-Line</a></li>
		<li><a href="docs/running.shtml#runningant">Ruuning the
		Panini Compiler from Within Ant</a></li>
		<!--<li><a href="docs/running.shtml#translating">Translating
        Panini into Java</a></li>-->
		<li><a href="docs/running.shtml#acknowledgments">Acknowledgments
		and Licensing</a></li>
	</ul>
	</li>
    <li><a href="docs/profiling.shtml">Profiling Panini Programs</a></li>
	<li><a href="docs/papers.shtml">Technical Publications</a></li>
	<li><a href="docs/faq.shtml">FAQ</a></li>
</ol>
<hr />
<!--#include virtual="./toc-just-examples.html"-->

</div>

<!-- CONTENT -->
<div class="col2-content">
<h2><a name="download">Downloading the Compiler</a></h2>
<p>The Panini compiler can be obtained in the following forms:</p>
<ul>
	<li>Pre-built binaries: From the Panini <a href="download">download
	page</a>
	<li>Source code: From sourceforge.net by the URL <a
		href="http://sourceforge.net/projects/paninij">http://sourceforge.net/projects/paninij</a>
</ul>
<p>For starting out, we would recommend the pre-built binaries that
account for all dependencies. The following instructions assume the use
of the pre-built package.
<p>
<h2><a name="structure">Structure of Panini Distribution</a></h2>
<p>The archive file contains the following:</p>
<ul>
	<li>bin: Executable versions of the Panini compiler for both *nix
	and WIN environments.</li>
	<li>lib: Jars files for panini.
	<li>examples: Some small examples of new Panini features.</li>
	<li>license: License agreements under with the Panini Compiler and
	associated tools are available.</li>
	<li>README: A textual version of this page.</li>
</ul>

<h2><a name="requirements">Requirements for Running Panini
Compiler</a></h2>
<ul>
	<li>Java Runtime Environment(JRE) 1.6 or greater.</li>
	<li><a href="http://ant.apache.org/">Apache Ant</a> is also
	recommended.</li>
</ul>

<h2><a name="running">Running the Panini Compiler</a></h2>
<p>The Panini compiler can be used in two ways:</p>
<ul>
	<li>like javac from the command-line</li>
	<li>as a replacement builder for javac in the javac ant task.</li>
</ul>

<p>The following sections describe usage.</p>

<h2><a name="commandline">Running the Panini Compiler from
the command-line</a></h2>
<p>The bin folder in this distribution contains scripts that can be
used to run the Panini compiler and to start compiled Panini programs.</p>
<ul>
	<li>bin/panc and bin/panini : the command-line interfaces for *nix systems.</li>
	<li>bin/panc.bat and bin/panini.bat : the command-line interface for WIN systems.</li>
</ul>

<p>
The <code>panc</code> and <code>panc.bat</code> scripts have an interface like <code>javac</code>. The <code>panini</code> and <code>panini.bat</code> have an interface like regular <code>java</code> program.
</p>

<h2><a name="examples">Compiling Examples from Command-Line</a></h2>
<p>Examples of some small Panini programs are located in the
examples folder. To compile an example, navigate to its directory and
use Panini compiler just like javac.</p>
<p>For example, to manually compile the Dining Philosophers example,
navigate to the examples directory and type
../bin/panc Philosophers.java.</p>
<p>Running compiled Panini programs requires the panini runtime be
on the jvm classpath. The required runtime classes are in
PANC_HOME/lib/panini_rt.jar. The <code>panini</code> script, packaged
in the bin directory, automatically starts a jvm with the correct library
on the classpath.</p>
<p>Use <code>$PANC_HOME/bin/panini AppEntry</code> to run
these programs.</p>

<h2><a name="runningant">Running the Panini Compiler from
Within Ant</a></h2>
<p>The panini compiler can be used in an ant build script by replacing the jar
file used by the <code>javac</code> task. See the OpenJDK notes in the
<a href="http://ant.apache.org/manual/Tasks/javac.html">Ant manual</a> for
more information.
</p>

<pre class="brush: xml;">
<property name="panc.dir"
          value="path/to/panini/install"></property>
<property name="panc.jar"
          value="${panc.dir}/lib/dist/lib/panc.jar"></property>

<!-- Create a version of javac, which uses the panini javac.jar. -->
<presetdef name="panc">
    <javac fork="yes">
        <compilerarg value="-J-Xbootclasspath/p:${panc.jar}"></compilerarg>
    </javac>
</presetdef>

<target name="build" >
    <panc srcdir="src"
          destdir="bin">
    </panc>
</target>
</pre>



<!-- Not currently true. Will be once the ant task is finished. 

<p>A javadoc with explanations of the added attributes for
JapycJavacAdaptor is included in docs/anttask.</p>

<p>Alternatively, the normal javac target can be overridden to use
the Panini compiler instead of the system Java compiler.</p>
<p>Create a build.properties files with the following line: <tt>build.compiler=edu.iastate.cs.ja_pyc.ant.JapycJavacAdapter</tt>
</p>
<p>Include the build.properties in build.xml file, either globally
or for specific targets.</p>
<p>Use the javac ant target to compile the java files. For example:
</p>
<pre class="brush: xml;">
<property name="output" value="bin"></property>
<property name="src" value="src"></property>
<target name="build" description="Compile">
    <property file="build.properties"></property>
    <javac srcdir="${src}" destdir="${output}">
        <classpath>
            <pathelement location="path/to/panini_rt.jar"></pathelement>
        </classpath>
    </javac>
</target>
</pre>
<p>Run ant with: <tt>ant -lib path/to/panc.jar</tt> to start ant
with the Panini compiler on ant's classpath. Note, panini_rt.jar is also
added to the classpath in the javac task. This is because the Panini
compiler needs some classes and annotations defined in the panini_rt.jar
file to run.</p>
-->

<!--
<h2><a name="translating">Translating Panini into Java</a></h2>
<p>The panini ant task can also translate Panini programs into pure
Java programs. After translation, a Panini program can be compiled with
any standard Java compiler. To translate a Panini program set the <tt>dotranslate</tt>
attribute to yes.</p>
For example: <pre class="brush: xml;">
<panc dotranslate="yes" srcdir="${source}" destdir="${output}"
	include="*.java"></panc>
</pre>
<p>will translate all the Panini source files in the <tt>${source}</tt>
to Java files in the <tt>${output}</tt> directory. The translation
attribute does not support a nested package structure for the source
files. If the translation option is used, all the source files must be
in the default package. When compiling with javac, panini_rt.jar must be
on the classpath. The build files for the included examples use the
translation/javac strategy to produce runnable byte code.</p>
-->

<!--The 2.0.0 release of Panini has some bugs with the class files it 
emits.  Thus the translation option may work better right now. This needs to be said
more diplomatically.
-->


<h2><a name="acknowledgments">Acknowledgments and Licensing </a></h2>
<p>The Panini compiler builds on the <a href="http://openjdk.java.net/">OpenJDK java compiler.</a> </p>

<p>All necessary licenses are included in the license directory.
<p>The Panini compiler is licensed under the Mozilla Public License
version 1.1 (MPL 1.1) license. You may obtain a copy of the license at <a
	href="http://www.mozilla.org/MPL/">http://www.mozilla.org/MPL/.</a> <!-- PAGE UPDATE -->
<p id="update">Page last modified on $Date: 2013/08/03 14:04:23 $</p>

<!-- GUIDE NAVIGATION -->
<div class="page-nav"><a href="docs/parallel.shtml">&lt;
PREVIOUS</a> <a href="docs/running.shtml#pgtop">&#94; RETURN TO TOP</a> <a
	href="docs/profiling.shtml">NEXT &gt;</a></div>
</div>

<!--#include virtual="../includes/bottom.html"-->
