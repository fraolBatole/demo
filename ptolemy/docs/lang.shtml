<!--#include virtual="../includes/top.html"-->
<title>Ptolemy Programming Guide : Language Features</title>
<!-- PAGE SPECIFIC STYLING -->
<style type="text/css">
.col2-toc h2 {
	margin: 0 0 10px;
}
</style>
<!--#include virtual="../includes/header.html"-->

<h1>The Ptolemy Programming Guide</h1>
<script type="text/javascript">
copyright=new Date()
fullYear=copyright.getFullYear();
document.write("<h5>Copyright &copy; 2006-" + fullYear + ", Iowa State University of Science and Technology. All rights reserved.</h5>")
</script>

<!-- TABLE OF CONTENTS -->
<div class="col2-toc">
<h2>Table of Contents</h2>
<ol>
	<li><a href="docs/index.shtml">Programming Guide Overview</a></li>
	<li><a href="docs/starting.shtml">Getting Started with Ptolemy</a></li>
	<li><a href="docs/running.shtml">Installing and Running the
	Ptolemy compiler</a></li>
	<li>The Ptolemy Programming Language
	<ul class="toc-currentpg">
		<li><a href="docs/lang.shtml#intro">Introduction</a></li>
		<li><a href="docs/lang.shtml#compatability">Compatability</a></li>
		<li><a href="docs/lang.shtml#example">Running Example</a></li>
		<li><a href="docs/lang.shtml#eventtype">Event Type
		Declaration</a></li>
		<li><a href="docs/lang.shtml#announcing">Announcing an Event</a></li>
		<li><a href="docs/lang.shtml#handler">Handlers</a></li>
		<li><a href="docs/lang.shtml#binding">Binding Declaration</a></li>
		<!-- <li><a href="docs/lang.shtml#annotation">Annotation Form of 
		Binding Declaration</a></li> -->
		<li><a href="docs/lang.shtml#activating">Activating All
		Bindings</a></li>
		<!-- <li><a href="docs/lang.shtml#register">Annotation Form of
		Register Expressions</a></li> -->
		<li><a href="docs/lang.shtml#grammar">BNF Grammar for Ptolemy</a></li>
	</ul>
	</li>
	<li><a href="docs/design-by-contract.shtml">Design-by-Contract
	Methodology in Ptolemy</a></li>
	<li><a href="papers/">Technical Publications</a></li>
</ol>
<hr />
<h3>Examples</h3>
<ul>
	<li><a href="docs/example-genetic.shtml">Genetic Algorithm</a></li>
</ul>
</div>

<!-- CONTENT -->
<div class="col2-content">
<h2><a name="intro">Introduction to the Ptolemy Language</a></h2>
<p>With traditional object-oriented techniques, when we implement
some requirements (e.g. exception handling, synchronization, resource
sharing and other resource management protocols, logging, etc) code for
such requirements is scattered everywhere in the software and tangled
with code for other requirements. Such requirements are called <em>crosscutting
concerns</em>. As a result, when maintenance requests arise in these type of
requirements, developers have to study a large number of modules in
their software system to identify changes that are required to address
maintenance request.</p>
<p>The aim of the Ptolemy language is to provide programming
language mechanisms that enable software developers to implement these
type of requirements (e.g. exception handling) in separate modules
called <a href="docs/lang.shtml#handler">handlers</a>. This enables
better separation of such concerns. In this sense, Ptolemy has the same
goals as <a href="http://aosd.net">aspect-oriented languages</a> like <a
	href="http://eclipse.org/aspectj">AspectJ</a>. However, aspect-oriented
languages also have certain <a href="docs/what-is-ao.shtml">limitations</a>
that Ptolemy doesn't have.</p>
<p>Ptolemy's language design incorporates several good ideas from
existing languages, e.g. <a href="http://eclipse.org/aspectj">AspectJ</a>,
<a href="http://www.cs.iastate.edu/~eos">Eos</a>, Rapide, and CaeserJ.
The novel features of Ptolemy are found in its event model and type
system. Ptolemy provides full support for declarative event-based
programming.</p>

<p>Like <a href="http://www.cs.iastate.edu/~eos">Eos</a> and unlike
<a href="http://eclipse.org/aspectj">AspectJ</a>, Ptolemy does not have
special syntax for “aspects” or “advice”. Instead it has the
capability to replace all events in a specified set with a call to a <a
	href="docs/lang.shtml#handler">handlers</a>.</p>

<h2><a name="compatability">Compatibility</a></h2>

<p>Ptolemy is backwards compatible with object-oriented languages.
For example, PtolemyJ that extends Java to add Ptolemy-specific features
is compatible with existing Java programs. Every valid Java program is a
valid PtolemyJ program. PtolemyJ compilers produce bytecode that runs on
standard Java virtual machine.</p>

<h2><a name="example">Running Example</a></h2>

<p>The code for this example is available from the Ptolemy compiler
distribution in the examples directory. The reader is encouraged to
consult our pages on <a href="docs/running.shtml">installing and
running Ptolemy compiler</a> for instructions on how to obtain the full
example source code.</p>
<p>As an example, consider a drawing editor which consists of
objects such as Points, Lines, etc. Each element is part of the overall
figure and implements the FigureElement interface (for figure elements).
Other classes may be interested in knowing when such figure elements
change. For example, there may be an Display class that updates the
figure on the screen when any element changes. The interface FElement is
shown in the listing below.</p>
<pre class="brush: java;">
	public interface FigureElement {
		void draw();
	}
</pre>

<p>The class Point is an example of an FigureElement. Points have an
x and a y location and setter methods setX and setY. Points also have a
method makeEqual, which will set the x and y location of its argument to
that of the current instance.</p>
<p>All three methods modify an instance of class Point and thus they
all call the Update method of the class Display to refresh. The first
two methods ask the Display to redraw the current instance while the
makeEqual method (since it modifies the other instance) asks the Display
to redraw the other instance.</p>

<pre class="brush: java;">
	public class Point implements FigureElement {
		int x;
		int y;
		public void setX(int x) {
			this.x = x;
			Display.Update(this);
		}
		public void setY(int y) {
			this.y = y;
			Display.Update(this);
		}
		public void makeEqual(Point other) {
			other.x = this.x;
			other.y = this.y;
			Display.Update(other);
		}
	}
</pre>

<p>One can see that all figure elements like Points, Lines, Circles,
etc will need to call the Update method of the Display class whenever
there is any change in the figure elements. For example, this code is
present in methods setX, setY, and makeEqual of the class Point. There
are two main disadvantages of such implementation.
</p>
<ul>
	<li>First, it couples classes Point, Lines, Circles, etc with the
	class Display. As a result, it becomes harder to reuse these classes
	without also having the class Display in that program. Not all programs
	containing Points, Lines, Circles are necessarily required to have
	displays, however.</li>
	<li>Second, it is not easy to update such code to reuse the
	notifications to the Display class. For example, if a developer wishes
	to also log the changes to figure elements, they will have to either
	insert calls to the logger again in all of Points, Lines, Circles, etc
	or they can also insertcode to log in the class Display. Both these
	situations are not satisfactory as the first requires &quot;exposing
	the change in figure element again&quot; and the second couples the
	class Display with the class Logger, which may not necessarily be
	related to each other.</li>
</ul>
<p>Such requirements that cut across the object-oriented code are
called <em>crosscutting concerns</em>. Ptolemy and other languages aim
to modularize these concerns, but Ptolemy aims to do so such that it
preserves encapsulation of object-oriented parts such as classes Point,
Line, Circle, etc and allow us to understand and reason about
object-oriented parts such as classes Point, Line, Circle and the
crosscutting parts such as the class Update one class at a time. Being
able to understand systems in that manner has distinct advantages.</p>

<h2><a name="eventtype">An Event Type Declaration in the
Ptolemy Language</a></h2>
<h3>Designing the Interface between Object-oriented and
Crosscutting Code</h3>
<p>First design and programming task in Ptolemy is to define the
interface between the object-oriented code and the crosscutting code.
This interface is expressed in the form of an <em>event type
declaration</em>. An event type declaration in the code is marked with the
keyword <b>event</b>.</p>
<p>The design of an <em>event type declaration</em> requires careful
considerations in a manner similar to the design of an application
programming interface (API). In particular, three questions are
important.</p>
<ul>
	<li>What are the important abstract events in my application?</li>
	<li>When should such events occur in my application?</li>
	<li>What information must be available when these events occur?</li>
</ul>
<p>For example, for our drawing editor example, the abstract events
of interest are changes in figure elements. These events should occur in
object-oriented code at places where the state of a figure elements is
modified, for example at places in the class <em>Point</em> where a
point's <em>x</em> or <em>y</em> coordinate changesor at places in the
class <em>Line</em> where a line's end-points changes. Furthermore, it
would be important to be able to identify the specific instance of the
figure element that is changing.</p>

<h3>An Example Event Type Declaration (FEChanged)</h3>
<p>Upon arriving at such conclusion about the drawing editor
example, we can encode it in the form of the following event type
declaration.</p>
<pre class="brush: ptolemy;">
	/***
	 * This event is signaled when the state of a figure element changes.
	 */
	public void event FEChanged {
		FigureElement changedFE;
	}
</pre>
<p>As seen above an event type is declared with the keyword <b>event</b>.
An event type also has return type, here <b>void</b>, which allows
crosscutting code to return values to object-oriented code. Finally, an
event type declares zero or more context variables. These context
variables represent information available when a concrete event of this
type happens in the application. The event type <em>FEChanged</em> here
declares one context variable <em>changedFE</em> of type <em>FigureElement</em>
that represents the figure that is changing. The type name <em>FigureElement</em>
must be visible in the scope. The intention of this event type
declaration is to provide a named abstraction for a set of events.</p>
<p>The type name of context variables must be visible in the scope
of the event type declaration.</p>
<p>A top-level event type declaration can have the <em>public</em>
visibility modifier or no modifier (in which case it has package level
visibility).</p>
<p>A nested (inner) event type declaration can have one of <em>
private</em>, <em>protected</em>, <em>public</em> or no modifiers.</p>
<p>Another example of an event type declaration can be seen below.</p>
<pre class="brush: ptolemy;">
	/***
	 * This event is signaled when a figure element moves.
	 * When this event is signalled details of the movement along 
	 * the X and the Y co-ordinates is available.
	 */
	public FigureElement event FEMoved {
		FigureElement movedFE;
		int deltaX; 
		int deltaY;
	}
</pre>
<p>The purpose of this event type declaration is to provide a named
abstraction for a set of events that correspond to a moving figure
element. It declares three context variables: <em>movedFE</em>, <em>deltaX</em>,
and <em>deltaY</em>. It also declares a return type <em>FigureElement</em>.
The return type of an event type is used to check the type of an event
announcement and event handlers (described later).</p>

<h3>Quantification using Event Types and Bindings</h3>
<p>Event type declarations are the key novel feature of Ptolemy. The
name of an event type allows programs to refer to a set of events and
thus to quantify over such a set of events. An important benefit is that
referring to elements in such a set of events does not require
explicitly enumerating them. So for example, the name <em>FEChanged</em>
refers to a set of events thus it could be thought of as <B>for all</B>
events such that their type is <em>FEChanged</em>.</p>

<h2><a name="announcing">Announcing an Event</a></h2>
<p>Events are explicitly signalled in Ptolemy. Event signalling is
declarative, explicit and typed.</p>
<p>Event signalling is declarative in the sense that it doesn't
require specifying the mechanism used to signal it (unlike
implicit-invocation and idioms for observer patterns). This allows
Ptolemy compilers to optimize event signalling behind the scene, while
maintaining the intended semantics.</p>

<p>It is typed in that signalling an event requires mentioning the
name of an event type, which must be a valid event type declaration in
the program. This allows Ptolemy compilers to check the correctness of
signalling events and include such signals in the set of events for that
event type.</p>
<p>The event signalling is done using the <em>announce
expressions</em>. There is a corresponding expression counterpart, but for
this discussion we will focus on announce expressions. Several example
usage of announce expressions for our figure editor examples appears in
the listing below.</p>
<pre class="brush: ptolemy;">
	public class Point implements FigureElement {
		int x;
		int y;
		public void setX(int x) {
			this.x = x;
			announce FEChanged(this);
		}
		public void setY(int y) {
			this.y = y;
			announce FEChanged(this);
		}
		public void makeEqual(Point other) {
			other.x = this.x;
			other.y = this.y;
			announce FEChanged(other);
		}
	}
</pre>
<p>In the listing above the announce expression occurs three times
on lines 6, 10, and 15. At all these locations the event being signalled
is of type <em>FEChanged</em>.</p>
<p>The method class like syntax of announce expressions allows
binding local values at the site of event signalling to context
variables of event type declaration. This binding is such that i<sup>th</sup>
argument of the announce expression is bound to the i<sup>th</sup>
context variable of the event type declaration. Here, line 6 binds <em>this</em>
to context variable <em>changedFE</em> and line 15 binds <em>other</em>
to context variable <em>changedFE</em>. Notice that the same context
variable is receiving different bindings for different event signalling
sites. However, the class <em>DisplayUpdate</em> will be able to access
all of these uniformly using the name <em>changedFE</em>.</p>
<p>It is also possible to allow overriding of the original code by
explicitly enclosing that code in an announce expression. In the listing
below an example of such announce expression is shown.</p>
<pre class="brush: ptolemy;">
	public class Point implements FigureElement {
		...
		public FigureElement moveBy(int deltaX, int deltaY) {
		 return announce FEMoved (this, deltaX, deltaY) { 
		  this.x += deltaX;
		  this.y += deltaY;
		  return this;
		 }
		}
	}
</pre>
<p>The announce expression in the listing above allows overriding of
the code on lines 5-7 (for example to implement movement restriction as
a separate concern). Notice that the type of the return value of the
block enclosed by the announce expressions (here <em>Point</em>) is a
subtype of the declared return type of event type declaration <em>FEMoved</em>
(here <em>FigureElement</em>).</p>
<p>This form of announce expression is more general compared to the
previously shown nonblock form <em>announce FEChanged(this);</em>. In
fact, the nonblock form is implemented by translating <em>announce
FEChanged(this)</em> to <em>announce FEChanged(this) { return null; }</em>.
Thus, it is just a syntactic sugar provided for convenience.</p>

<h2><a name="handler">A Handler in the Ptolemy Language</a></h2>
<p>An object-oriented class is called a handler class (or simply
handler) in Ptolemy's terminology if it reacts to events signalled by
other classes in that software system. Handlers typically implement
croscutting requirements.</p>
<p>Handlers are declared using the keyword <B>class</B> so like the
<a href="http://www.cs.iastate.edu/~eos">Eos</a> programming language
there is no distinction at the declaration level between standard
object-oriented classes and handlers.</p>
<p>An example of a handler declaration is shown below:</p>
<pre class="brush: ptolemy;">
	public class DisplayUpdate {
		...
		when FEChanged do update;
		public void update(FEChanged next) throws Throwable {
			...
		}
	}
</pre>
<p>This declaration has two parts: a standard object-oriented method
<em>update</em> on lines 4-6 and a new construct in Ptolemy called a <b>binding
declaration</b> on line 3.</p>

<h2><a name="binding">Binding Declaration</a></h2>
<p>A binding declaration in Ptolemy associates a method in a class
to a set of events identified by an event type. An example is shown
above on line 3. In this binding declaration, the identifier <em>FEChanged</em>
refers to the type of an <a href="#eventtype"> event type
declaration</a>. Briefly, an event type declaration gives a type for events
that can be signalled in that program. The identifier <em>update</em>
refers to the name of a method.</p>
<pre class="brush: ptolemy;">
	...
	...
	when FEChanged do update;
</pre>
<p>Effectively, the binding declaration on line 3 says to run method
<em>update</em> when events of type <em>FEChanged</em> are announced.</p>
<p>The use of the event type names in binding declarations
simplifies these declarations and avoids coupling class DisplayUpdate to
classes that may signal events of type <em>FEChanged</em>. This allows
selecting a number of such event signalling with just one succinct
binding declaration, without depending on the modules that announce
events.</p>
<p>Both event type name and method name used in a binding
declaration must be visible in the scope of that binding declaration.</p>

<!-- 

<h2><a name="annotation">Annotation Form of Binding
Declarations</a></h2>
<p>An annotation form of binding declaration is also available. The
listing below shows an example of such annotation.</p>
<pre class="brush: ptolemy;">
	public class DisplayUpdate {
		...
		@When(FEChanged.class)
		public void update(FEChanged next) throws Throwable {
			...
		}
	}
</pre>
<p>This form effectively achieves the same purpose as the previous
(more explict) form of the binding declaration.</p>
<p>In this binding declaration, a Ptolemy-specific annotation <em>@When</em>
is used. The identifier <em>FEChanged.class</em> refers to the type of
an <a href="#eventtype"> event type declaration</a>.</p>

-->

<h2><a name="activating">Activating All Bindings in a Class</a></h2>
<p>Ptolemy allows bindings to be activated at runtime using <em>register</em>
expressions. An example is presented in the listing below.</p>
<pre class="brush: ptolemy;">
	public class DisplayUpdate {
		public DisplayUpdate() {
		 register(this);
		}
	
		when FEChanged do update;
		public void update(FEChanged next) throws Throwable {
			...
		}
	}
</pre>
<p>An example of register expression appear on line 3 for the
constructor method of the class <em>DisplayUpdate</em>. The effect of
this expression is to activate all binding declarations in that class.</p>
<p>In the listing above the register expression on line 3 says that
whenever an instance of class <em>DisplayUpdate</em> is constructed
using the default constructor <em>DisplayUpdate()</em> it is activated
such that whenever event <em>FEChanged</em> is signalled method <em>update</em>
is run.</p>

<!--

<h2><a name="register">Annotation Form of Register Expressions</a>
</h2>
<p>Similar to binding declarations, an annotation-based shorthand
for register expression is also available. The following listing
demonstrates.</p>
<pre class="brush: ptolemy;">
	public class DisplayUpdate {
	
		@Register
		public DisplayUpdate() {
		}
	
		@When(FEChanged.class)
		public void update(FEChanged next) throws Throwable {
			...
		}
	}
</pre>
<p>In the listing above the annotation <em>@Register</em> on line 3
says that whenever an instance of class <em>DisplayUpdate</em> is
constructed using the default constructor <em>DisplayUpdate()</em> it is
activated such that whenever event <em>FEChanged</em> is signalled
method <em>update</em> is run.</p>

-->

<h2><a name="grammar">Invoke Expression and its Semantics</a>
</h2>
<p>
In Ptolemy, handlers take an event closure as their first argument. The event closure
contains the code needed to run the applicable handlers and the original event body. 
The event closure is run by <em>invoke</em> expressions. Invoke expression runs the 
handlers by the order they are registered and if there are no handlers, the event body 
is run. Invoke expression, transfers the control to the next applicable handler. 
An example is presented in the listing below.
</p>

<pre class="brush: ptolemy;">
	public class DisplayUpdate {
	        ...
		@When(FEChanged.class)
		public void update(FEChanged next) throws Throwable {
			next.invoke();
            Display.update();
		}
	}
</pre>

<p>
The handler <em>update</em> is supposed to update the display <b>after</b> a figure element is changed. Thus, it 
calls invoke on the closure parameter of the handler on line 5, before anything else, to transfer the control to the 
event body, making sure the event body is executed before the update. After event body executes, the control is transferred
back to the the  handler <em>update</em> which in turn updates the display on line 6. If lines 5 and 6 are replced with each other, then
the display is updated first and then the event body is executed, which means the display is updated before the figure element is changed.
</p>


 

<p>
</p>

<h2><a name="grammar">BNF Grammar for New features in Ptolemy</a>
</h2>
<p>
Ptolemy extends Java with new mechanisms for
declaring events and for announcing these events. These syntax extensions 
are shown below. In this extension, productions of the form
&quot;...&quot; represent all existing rules for Java plus rules on the right.
</p>

<p>
&#60;TypeDecl &#62; ::= ... | &lt;EventDecl&gt; <BR>
&#60;EventDecl&gt; ::= [ &lt;Modifier&gt;* ] &lt;Type&gt; <b>event</b> &lt;Identifier&gt; { &lt;ContextVariable&gt;* [ &lt;Contract&gt; ] } <BR>
&lt;ContextVariable&gt; ::= &lt;Type&gt; &lt;Identifier&gt; ; <BR><BR>
&lt;ClassBodyDecl&gt; ::= ... | &lt;BindingDecl&gt; <BR>
&lt;BindingDecl&gt; ::= <b>when</b> &lt;Type&gt; <b>do</b> &lt;Identifier&gt; ; <BR><BR>
&lt;Expr&gt; ::= ... | &lt;RegisterExpr&gt; | &lt;InvokeExpr&gt; <BR>
&lt;RegisterExpr&gt; ::= <b>register</b> ( &lt;Expr&gt; ) ; <BR>
&lt;InvokeExpr&gt; ::= &lt;Expr&gt; . <b>invoke</b> ( ) <BR><BR>
&lt; Statement&gt; ::= ... | &lt;AnnounceStmt&gt;  <BR>
&lt;AnnounceStmt&gt; ::= <b>announce</b> &lt;Type&gt; ( &lt;Expr&gt;* ) {  &lt;Expr&gt;  } <BR>
&lt;AnnounceStmt&gt; ::= <b>announce</b> &lt;Type&gt; ( &lt;Expr&gt;* ) ; <BR><BR>
</p>

<!--
&lt;AnnounceExpr&gt; ::= <b>announce</b> &lt;Type&gt; ( &lt;Expr&gt;* ) {  &lt;Expr&gt;  } <BR>
&lt;AnnounceExpr&gt; ::= <b>announce</b> &lt;Type&gt; ( &lt;Expr&gt;* ) ; <BR>
-->
<p></p>
<p>
Ptolemy also allows developers to write contracts as part of the event type 
definition. This <a href="docs/design-by-contract.shtml">design-by-contract
methodology in Ptolemy</a> is described in detail later. 
The grammar for writing contracts is shown below.
</p>

<p>
&#60;Contract &#62; ::= <b>requires</b> &lt;Expr&gt; <b>assumes</b> &lt;AssumeBlock&gt; <b>ensures</b> &lt;Expr&gt; <BR>
&lt;AssumeBlock&gt; ::= { &lt; AssumeBlockStatement &gt;* } <BR>
&lt;AssumeBlockStatement ::= &lt;Statement&gt; | &lt;SpecStatement&gt; <BR>
&lt;SpecStatement&gt; ::=  <b>requires</b> &lt;Expr&gt; <b>ensures</b> &lt;Expr&gt; ; <BR> 
&lt;SpecStatement&gt; ::=  <b>preserves</b> &lt;Expr&gt; ;  <BR>
&lt;SpecStatement&gt; ::=  <b>establishes</b> &lt;Expr&gt; ;  <BR>
</p>

<p>
The expressions expr in &quot;<b>requires</b> expr&quot;, &quot;<b>ensures</b> expr&quot; 
&quot;<b>preserves</b> expr&quot;, and &quot;<b>establishes</b> expr&quot; must be pure, i.e. 
evaluation of this expression shall not produce any side-effect such as writing a program variable.
</p>

<!-- PAGE UPDATE -->
<p id="update">Page last modified on $Date: 2012/01/07 16:25:19 $</p>

<!-- GUIDE NAVIGATION -->
<div class="page-nav"><a href="docs/running.shtml">&lt;
PREVIOUS</a> <a href="docs/lang.shtml#pgtop">&#94; RETURN TO TOP</a> <a
	href="docs/design-by-contract.shtml">NEXT &gt;</a></div>
</div>

<!--#include virtual="../includes/bottom.html"-->
