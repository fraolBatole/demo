I"û<ol id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a></li>
  <li><a href="#analyses-and-output-details" id="markdown-toc-analyses-and-output-details">Analyses and Output Details</a></li>
  <li><a href="#implementation-and-results" id="markdown-toc-implementation-and-results">Implementation and Results</a>    <ol>
      <li><a href="#exception" id="markdown-toc-exception">Exception</a></li>
      <li><a href="#synchronization" id="markdown-toc-synchronization">Synchronization</a></li>
      <li><a href="#io" id="markdown-toc-io">I/O</a></li>
      <li><a href="#method-call" id="markdown-toc-method-call">Method Call</a></li>
      <li><a href="#combined-effect-analysis" id="markdown-toc-combined-effect-analysis">Combined Effect Analysis</a></li>
    </ol>
  </li>
</ol>

<h3 id="introduction">Introduction</h3>
<p>This page provides supplementary material for our effect substitutability study.
We used the <a href="http://boa.cs.iastate.edu">Boa infrastructure</a>, and
specifically their September 2015 GitHub dataset to complete this study.
Here we provide access to our analyses implementations coupled with the raw
results and an explanation of the output files.</p>

<h3 id="analyses-and-output-details">Analyses and Output Details</h3>
<p>Each of the analyses were written in the Boa domain-specific language, and links
to the implementations and raw outputs are given in the next section.
Here we will discuss what one can expect to find in the outputs.</p>

<p>In the outputs, each line has the form ‚Äúx[y] = z‚Äù where x is the output type‚Äôs
name, y is the key, and z is the value.
There are two output types that are the most important.
The first is lines with the format ‚Äústat[key] = # occurrences‚Äù, which provides
statistical information such as the number of source files examined or the
number of private methods that do not throw exceptions.
The second has the format ‚Äúout[] = value‚Äù, which is used by the exception,
synchronization, and I/O analyses to output information on each method pair with
that effect type.
The value is a #-delimited list with the following format:</p>

<ol>
<li>GitHub repository name</li>
<li>Method name for the method pair</li>
<li>Subclass name</li>
<li>Supermethod effect</li>
<li>Submethod effect</li>
<li>Category of effect difference between the two methods</li>
<li>Further information dependent on the analysis</li>
</ol>

<p>In general, the categories begin with an exclamation and compare the sub and
supermethod effects, stating which method has ‚Äúmore‚Äù effects than the other.
For example, a category of !n is used to state the effects of both methods in a
pair are the same and !y is used to state the ‚Äúsize‚Äù of the effects are the
same, but the effect itself is different.</p>

<h3 id="implementation-and-results">Implementation and Results</h3>
<p>There are 5 Boa analyses, 4 for each of the side-effect types: exception,
synchronization, I/O, and method call.
The last analysis combines each of the previous analyses into one and provides
aggregate information.
For each analysis, a link is provided to the Boa job, whose page allows one to
download both the implementation and the raw output.
Note that each of these jobs were ran on the full September 2015 GitHub dataset.</p>

<h4 id="exception">Exception</h4>
<p>Boa job: <a href="http://boa.cs.iastate.edu/boa/?q=boa/job/public/66383">Exception Effect Analysis</a></p>

<p>The methods effects are the set of exception types thrown in the format of a
comma delimited list.
The last item is the set of exception types that the supermethod declare it may
throw in the method signature.
An exception of type !UNKNOWN! indicates that the type could not be decided by
the analysis.
The category is a set-based comparison of the effects of the sub and
supermethods.</p>

<h4 id="synchronization">Synchronization</h4>
<p>Boa job: <a href="http://boa.cs.iastate.edu/boa/?q=boa/job/public/66381">Synchronization Effect Analysis</a></p>

<p>Method effects are the way synchronization is used: none (!NONE), only acquiring
a lock (!ACQUIRE), only releasing (!RELEASE), or both (!BOTH).
The last entry denotes the most fine-grained synchronization used in either of
the methods.
So if one method uses locks it would be !hasLock, if blocks then !hasBlock, and
if only the synchronized modifier is used then !hasModifier.</p>

<h4 id="io">I/O</h4>
<p>Boa job: <a href="http://boa.cs.iastate.edu/boa/?q=boa/job/public/68545">I/O Effect Analysis</a></p>

<p>Method effects are type of I/O identified: none (NONE), output only (OUT), input
only (IN), and both (BOTH).
Last entry denotes the type of I/O classes used: !CONSOLE if any console-related
objects were used, !FILE if file objects are used but no console ones, otherwise
!BUS.</p>

<h4 id="method-call">Method Call</h4>
<p>Boa job: <a href="http://boa.cs.iastate.edu/boa/?q=boa/job/public/66378">Method Call Effect Analysis</a></p>

<p>Due to the number of methods and method calls in the dataset, we only output
statistics here.</p>

<h4 id="combined-effect-analysis">Combined Effect Analysis</h4>
<p>Boa job: <a href="http://boa.cs.iastate.edu/boa/?q=boa/job/public/66382">All Effects Combined Analysis</a></p>

<p>This output mainly provides statistics regarding the kinds of side-effects used
by all methods and by all method pairs where the submethod has more of an
effect.
The method pair outputs that are shown are a small subset of pairs with effects
as decided by a random number generator.</p>
:ET